/**
 * @version 1.0
 * @author Jasmine Feng and Risham Chokshi
 */


package cs213.photoAlbum.control;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.GregorianCalendar;

import cs213.photoAlbum.model.Album;
import cs213.photoAlbum.model.Photo;
import cs213.photoAlbum.model.User;
import cs213.photoAlbum.model.totalData;
import cs213.photoAlbum.simpleview.InteractiveView;

public class ProgramControl implements Controller{
	
	ArrayList<User> users;
	User currentUser;
	String userFilename = "\\data\\users.ser";
	String photoFilename = "\\data\\photos.txt";
	String albumFilename = "\\data\\albums.txt";
	
	
	public ProgramControl(ArrayList<User> users) {
		this.users = users;
	}
	
	public void setUsers(ArrayList<User> users){
		this.users = users;
	}
	
	//Functionality
	/**
	 * creates and adds an album to the user's list, calls addAlbum in User class
	 * @param name of the new album
	 * @return
	 */
	public boolean createAlbum(String name) {
		return currentUser.addAlbum(name);

	}
	
	/**
	 * removes an album from the user's list by name, calls deleteAlbum in User class
	 * @param name
	 * @return
	 */
	public boolean deleteAlbum(String name) {
		return currentUser.deleteAlbum(name);
	}
	
	/**
	 * to list album names, calls listAlbum in User class
	 */
	public void listAlbums() {
		currentUser.listAlbums();
	}
	
	/**
	 * renames the album
	 * @param oldName the album to be changed
	 * @param newName the new name of the album
	 * @return 
	 */
	public boolean renameAlbum(String oldName, String newName) {
		return currentUser.renameAlbum(oldName, newName);
	
	}
	
	/**
	 * lists the photos in a particular album
	 * @param albumName
	 */
	public void listPhotos(String albumName) {
		currentUser.listPhotos(albumName);
	}
	
	/**
	 * @param filename
	 * @param caption
	 * @param albumName
	 * @return
	 */
	public boolean addPhoto(String filename, String caption, String albumName) {
		currentUser.addPhoto(filename, caption, albumName);
		return true;
	}
	
	/**
	 * @param filename
	 * @param oldAlbumName
	 * @param newAlbumName
	 * @return
	 */
	public boolean movePhoto(String filename, String oldAlbumName, String newAlbumName) {
		currentUser.movePhoto(filename, oldAlbumName, newAlbumName);
		return true;
	}
	
	/**
	 * @param filename
	 * @param albumName
	 * @return
	 */
	public boolean removePhoto(String filename, String albumName) {
		currentUser.removePhoto(filename, albumName);
		return true;
	}
	
	/**
	 * edits the caption of the photo
	 * @param photo to be changed
	 * @param caption the new caption for the photo
	 * @return
	 */
	public boolean editCaption(Photo photo, String caption) {
		//TODO
		
		return false;
	}

	/**
	 * adds a tag to a photo
	 * @param filename the string filename
	 * @param tagName the string tag name
	 * @param tagValue the string tag value
	 * @return
	 */
	public boolean addTag(String filename, String tagName, String tagValue) {
		totalData.addTag(filename, tagName, tagValue);
		return true;
	}
	
	/**
	 * deletes the tag
	 * @return true if success, false if failed
	 */
	public boolean deleteTag(String filename, String tagName, String tagValue) {
		return false;
	}
	
	//Helper methods
	/**
	 * calls the findAlbum in User class
	 * @param name of the album
	 * @return Album object or null if not found
	 */
	public Album findAlbum(String name) {
		return null;
	}
	
	/**
	 * finds a photo
	 * @param filename the String filename of the photo
	 * @return photo object or null if not found
	 */
	public Photo findPhoto(String filename) {
		return null;
	}
	
	/**
	 * list out the users in the system
	 */
	public void listUsers() {
		System.out.println(users.size());
		for(int i=0; i<users.size(); i++) {
			System.out.println(users.get(i).getID() + " " + users.get(i).getName());
		}
	}
	
	/**
	 * adds a user to the system
	 * @param id the string id
	 * @param name the name of the user
	 * @return true if success, false if failed
	 */
	public boolean addUser(String id, String name){
		if(users == null){
			System.out.println("error: null users list");
		}
		if(findUser(id) == null){
			System.out.println("user already exist");
			return false;
		}
		else{
			users.add(new User(id, name));
			return true;
		}
		
	}
	
	/**
	 * removes a user by their id
	 * @param id as a String
	 * @return true if success, false if failed
	 */
	public boolean deleteUser(String id) {
		for(int i=0; i<users.size(); i++){
			if(users.get(i).getID().equals(id)){
				users.remove(i);
				return true;
			}
		}
		//user not found
		return false;
	}
	
	/**
	 * log in as a specific user by String id
	 * @param id of the user as a String
	 * @return true if success, false if failed
	 */
	public boolean login(String id) {
		User user = findUser(id);
		if(user != null) {
			currentUser = user;
			return true;
		}else{
			//user not found
			return false;
		}
	}
	
	/**
	 * logs the user out of the system
	 * @return true if success, false if failed
	 */
	public boolean logout() {
		if(currentUser != null){
			//there is someone logged in
			currentUser = null;
			return true;
		}else{
			//no one is logged in, error
			return false;
		}
	}
	
	
	//Helper Methods
	/**
	 * find a user by the String id
	 * @param id the String user id
	 * @return the User if found, null otherwise
	 */
	public User findUser(String id) {
		System.out.println("findUser");
		for(int i=0; i<users.size(); i++){
			if(users.get(i).getID().equals(id)){
				System.out.println(users.get(i).getID() + " " + users.get(i).getName());
				return users.get(i);
			}
		}
		return null;
	}
	
	//reading files stuff
	/**
	 * load the users from a file
	 * id | name
	 * @return true if success, false if failed
	 * @throws IOException 
	 */
	public ArrayList<User> readUsersFromFile() throws IOException {
		ArrayList<User> users = new ArrayList<User>();
		
		String path = System.getProperty("user.dir");
		path = path.substring(0, path.length()-4);
		path += userFilename;
		
		System.out.println(path);
		
		BufferedReader br = new BufferedReader(new FileReader(path));     
		if (br.readLine() == null) {
		    System.out.println("empty file, no data to be read in");
		    br.close();
		    return users;
		}
		
		try{
			FileInputStream fileIn = new FileInputStream(path);
			ObjectInputStream in = new ObjectInputStream(fileIn);
			users = (ArrayList<User>) in.readObject();
			in.close();
			fileIn.close();
			return users;
		}catch(IOException exception){
			exception.printStackTrace();
			System.out.println("file does not exist or is blank");
			return users;
		}catch(ClassNotFoundException exception){
			System.out.println("User class does not exist");
			return users;
		}
		
		
	}
	
	/**
	 * load the photo information from file, like caption, filename, etc
	 * format like so:
	 * filename|caption|userid|album1@album2@album3@|TODO calendar stuff???
	 * @return true if success, false if failed
	 * @throws IOException 
	 */
	public boolean readPhotosFromFile() throws IOException {
		
		String path = System.getProperty("user.dir");
		path = path.substring(0, path.length()-4);
		path += photoFilename;
		
		File file = new File (path);
		
		if(!file.exists()) {
			file.createNewFile();
			return false;
		}
	
		//System.out.println("/n" + path + "/n");
		FileReader fr = new FileReader(file);
		BufferedReader br = new BufferedReader(fr);
		
		String line;
		
		while((line = br.readLine()) != null) {
			if(line.length()>1){
				String[] tokens = line.split("\\|");
				Photo photo = new Photo(tokens[0], tokens[1], new GregorianCalendar());
			}
		}
		
		br.close();
		return true;
	}
	
	/**
	 * load the album information from file
	 * format the album file like:
	 * name | userid
	 * @param filename String filename
	 * @return true if success, false if failed
	 * @throws IOException 
	 */
	public boolean readAlbumsFromFile() throws IOException {
		//System.out.println("reading albums from file");
		String path = System.getProperty("user.dir");
		path = path.substring(0, path.length()-4);
		path += albumFilename;
		
		File file = new File (path);
		
		if(!file.exists()) {
			file.createNewFile();
			return false;
		}
		FileReader fr = new FileReader(file);
		BufferedReader br = new BufferedReader(fr);
		
		String line;
		
		while((line = br.readLine()) != null) {
			if(line.length()>1){
				String[] tokens = line.split("\\|");
				System.out.println(tokens.length);
				//tokens[1] is where the user id is stored
				User user = findUser(tokens[1]);
				if(user != null){
					user.addAlbum(tokens[0]);
				}
			}
		}
		br.close();
		return true;
	}
	
	public void updateUserFile(ArrayList<User> users) throws IOException{
		System.out.println("updating user file");
		String path = System.getProperty("user.dir");
		path = path.substring(0, path.length()-4);
		path += userFilename;
		
		try{

			FileOutputStream fileOut = new FileOutputStream(path);
			ObjectOutputStream out = new ObjectOutputStream(fileOut);
			out.writeObject(users);
			out.close();
			fileOut.close();
			
		}catch(IOException i){
			i.printStackTrace();
		}
	}
	
	/**
	 * format like so:
	 * filename | caption | albumname | userid
	 * @throws IOException 
	 * 
	 * 
	 */
	public void updatePhotoFile() throws IOException{
		System.out.println("updating photo file");
		String path = System.getProperty("user.dir");
		path = path.substring(0, path.length()-4);
		path += photoFilename;
		
		File file = new File (path);
		
		if(!file.exists()) {
			file.createNewFile();
		}

		//System.out.println("/n" + path + "/n");		
		FileWriter fw = new FileWriter(file.getAbsoluteFile());
		BufferedWriter bw = new BufferedWriter(fw);
		
		String line = "";
		ArrayList<Photo> photolist;
		for(int i=0; i<users.size(); i++) {
			System.out.println("\t user: " + users.get(i).getName());
			for(int y=0; y<users.get(i).getAlbums().size(); y++){
				photolist = users.get(i).getAlbums().get(y).getPhotos();
				System.out.println("\t album " + users.get(i).getAlbums().get(y).getName());
				for(int z=0; z<photolist.size(); z++){	
					System.out.println("\t photo: " + photolist.get(z).getFilename());
					line += photolist.get(z).getFilename() + "|" + photolist.get(z).getCaption() + "|" + users.get(i).getID() + "|";
						for(int t=0; t<photolist.get(z).getAlbums().size();t++){
							System.out.println("\t albums that contain it: " + photolist.get(z).getAlbums().get(t));
							line += photolist.get(z).getAlbums().get(t).getName() + "@";
						}
						line += "\n";
					System.out.println(line);
					bw.write(line);
					line = "";
				}
			}

		}
		bw.flush();
		bw.close();
	}
	
	public void updateAlbumFile() throws IOException{
		System.out.println("updating album file");
		String path = System.getProperty("user.dir");
		path = path.substring(0, path.length()-4);
		path += photoFilename;
		
		File file = new File (path);
		
		if(!file.exists()) {
			file.createNewFile();
			System.out.println("here");
		}

		System.out.println("\n" + path + "\n");		
		FileWriter fw = new FileWriter(file.getAbsoluteFile());
		BufferedWriter bw = new BufferedWriter(fw);
		
		//testing the file writing.....
		bw.write("hi");
		
		
		String line = "";
		ArrayList<Photo> photolist;
		for(int i=0; i<users.size(); i++) {
			System.out.println("\t user: " + users.get(i).getName());
			for(int y=0; y<users.get(i).getAlbums().size(); y++){
				line += users.get(i).getAlbums().get(y).getName() + "|" + users.get(i).getID() + "\n";
				System.out.println(line);
				bw.write(line);
				bw.newLine();
				//bw.flush();
				line = "";
				
			}

		}
		bw.flush();
		bw.close();
	}



	/**
	 * lists photo by info
	 * @param filename the string name of the photo file
	 * @param id the string id of the user
	 */
	public void listPhotoInfo(String filename, String id){
		totalData.listPhotoInfo(filename, id);
	}
	
	/**
	 * retrieves all photos taken in a range of dates in chronological order
	 * @param startDate the beginning of the range
	 * @param endDate the end of the range
	 */
	public void getPhotosByDate(String startDate, String endDate){
		currentUser.getPhotosByDate(startdate, enddate);
		//TODO
	}
	
	/**
	 * To retrieve all photos that have all the given tags, in chronological order. 
	 * Tags can be specified with or without their types
	 * @param tags String[] of tags in format - <tagType>:"tagValue"
	 */
	public void getPhotosByTag(String[] tags){
		totalData.getPhotosByTag(tagName, tagValue, currentUser.getID());
		//TODO
	}
	
}
